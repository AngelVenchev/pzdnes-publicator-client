{"version":3,"sources":["logo.svg","Services/HttpService.js","Services/PublicatorService.js","Components/Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseUrl","url","body","actualUrl","this","fetch","method","headers","Accept","JSON","stringify","credentials","HttpService","MakePost","App","className","htmlFor","props","name","title","id","type","value","placeholder","onChange","React","Component","loadEmailData","state","model","articles","PublicatorService","GetNews","then","httpResponse","ok","console","log","json","response","setState","error","handleChange","e","change","target","saveCredentials","localStorage","setItem","loadCredentials","stringCreds","getItem","parse","alert","emailSenderFilter","emailUsername","emailPassword","wordpressUsername","wordpressPassword","map","article","content","src","logo","alt","onClick","renderArticles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9aa431ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","class HttpService {\r\n  baseUrl = 'https://tgddml3e7h.execute-api.eu-central-1.amazonaws.com/Prod';\r\n\r\n  MakePost(url, body) {\r\n    var actualUrl = this.baseUrl + url;\r\n    return fetch(actualUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(body),\r\n    });\r\n  }\r\n}\r\n\r\nexport default new HttpService();","import HttpService from './HttpService.js';\r\n\r\nclass PublicatorService {\r\n  GetNews(credentials) {\r\n    return HttpService.MakePost('/api/Publicator/GetNews', credentials);\r\n  }\r\n}\r\n\r\nexport default new PublicatorService();\r\n","import React from 'react';\r\nimport './Input.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Input\">\r\n        <div>\r\n          <label htmlFor={this.props.name}>{this.props.title}</label>\r\n        </div>\r\n        <div>\r\n          <input\r\n            id={this.props.name}\r\n            name={this.props.name}\r\n            type={this.props.type || \"text\"}\r\n            value={this.props.value}\r\n            placeholder={this.props.placeholder}\r\n            onChange={this.props.onChange} \r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport PublicatorService from './Services/PublicatorService.js';\r\nimport Input from './Components/Input.js';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      emailSenderFilter: '',\r\n      emailUsername: '',\r\n      emailPassword: '',\r\n      wordpressUsername: '',\r\n      wordpressPassword: '',\r\n      articles: [\r\n        // {content: 'Двама нелегални дървосекачи управляващи автомобили с чужди табели са задържани в ареста на РУ-Септември. Това е станало след сигнал на служители от Държавното горско стопанство в Пазарджик.  През уикенда в землището на септемврийското село Семчиново лесничеите патрулирали,   когато засекли два леки автомобила по пътя към параклиса „Свети Илия“. Виждайки горските стражари двамата водачи изоставили возилата и избягали. На мястото били повикани екипи от полицейското управление в Септември. Оказало се, че возилата „Лада“ и „Опел“ са оборудвани с чужди регистрационни табели. В багажниците им са открити около 1.5 кубически метра незаконно добита широколистна дървесина. Криминалистите от полицейското управление започнали работа по случая и не след дълго установили и задържали бегълците. Оказало се, че това са семчиновците К.А.-26г. и Г.Б.-18г. Спрямо тях е образувано досъдебно производство.'}\r\n      ]\r\n    }\r\n  }\r\n\r\n  loadEmailData = () => {\r\n    var {articles, ...model} = this.state;\r\n    PublicatorService.GetNews(model)\r\n      .then(httpResponse => {\r\n        if(httpResponse.ok) {\r\n          console.log('success');\r\n          httpResponse.json().then(response => {\r\n            debugger;\r\n            this.setState({articles: response.articles});\r\n            console.log(response);\r\n          })\r\n        } else {\r\n          console.error(\"fail\");\r\n        }\r\n      });\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    var change = {};\r\n    change[e.target.name] = e.target.value;\r\n    this.setState(change, () => console.log(this.state));\r\n  }\r\n\r\n  saveCredentials = () => {\r\n    var state = JSON.stringify(this.state);\r\n    localStorage.setItem('credentials', state);\r\n  }\r\n\r\n  loadCredentials = () => {\r\n    var stringCreds = localStorage.getItem('credentials');\r\n    if(stringCreds) {\r\n      var state = JSON.parse(stringCreds);\r\n      this.setState(state);\r\n    } else {\r\n      alert('No credentials found');\r\n    }\r\n  }\r\n\r\n  renderArticles() {\r\n    return this.state.articles.map(article => {\r\n      return <div className=\"Article\">\r\n        <p>{article.content}</p>\r\n      </div>\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </header>\r\n        <section>\r\n          <div className=\"Form\">\r\n            <Input name=\"emailSenderFilter\" title=\"Email Sender\" value={this.state.emailSenderFilter} onChange={this.handleChange} />\r\n            <Input name=\"emailUsername\" title=\"Email Username\" value={this.state.emailUsername} onChange={this.handleChange}/>\r\n            <Input name=\"emailPassword\" title=\"Email Password\" value={this.state.emailPassword} onChange={this.handleChange} type=\"password\"/>\r\n            <Input name=\"wordpressUsername\" title=\"Wordpress Username\" value={this.state.wordpressUsername} onChange={this.handleChange}/>\r\n            <Input name=\"wordpressPassword\" title=\"Wordpress Password\" value={this.state.wordpressPassword} onChange={this.handleChange} type=\"password\"/>\r\n            <div>\r\n              <button onClick={this.saveCredentials}>Save Credentials</button>\r\n            </div>\r\n            <div>\r\n              <button onClick={this.loadCredentials}>Load Credentials</button>\r\n            </div>\r\n            <div>\r\n              <button onClick={this.loadEmailData}>Load Email Data</button>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section className=\"Articles\">\r\n          {this.renderArticles()}\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}