{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","loadEmailData","handleChange","e","change","target","name","value","setState","console","log","state","saveCredentials","JSON","stringify","localStorage","setItem","loadCredentials","stringCreds","getItem","parse","alert","emailSenderFilter","emailUsername","emailPassword","wordpressUsername","wordpressPassword","className","src","logo","alt","type","this","placeholder","onChange","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAOC,QAAU,IAA0B,kC,8MC0G5BC,G,kBArGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRC,cAAgB,aAZG,EAgBnBC,aAAe,SAACC,GACd,IAAIC,EAAS,GACbA,EAAOD,EAAEE,OAAOC,MAAQH,EAAEE,OAAOE,MACjC,EAAKC,SAASJ,GAAQ,kBAAMK,QAAQC,IAAI,EAAKC,WAnB5B,EAsBnBC,gBAAkB,WAChB,IAAID,EAAQE,KAAKC,UAAU,EAAKH,OAChCI,aAAaC,QAAQ,cAAeL,IAxBnB,EA2BnBM,gBAAkB,WAChB,IAAIC,EAAcH,aAAaI,QAAQ,eACvC,GAAGD,EAAa,CACd,IAAIP,EAAQE,KAAKO,MAAMF,GACvB,EAAKV,SAASG,QAEdU,MAAM,yBA9BR,EAAKV,MAAQ,CACXW,kBAAmB,GACnBC,cAAe,GACfC,cAAe,GACfC,kBAAmB,GACnBC,kBAAmB,IARJ,E,sEAsCjB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAE3C,iCACE,yBAAKH,UAAU,QACb,6BACE,2BACErB,KAAK,oBACLyB,KAAK,OAAOxB,MAAOyB,KAAKrB,MAAMW,kBAC9BW,YAAY,kBACZC,SAAUF,KAAK9B,gBAGnB,6BACE,2BACAI,KAAK,gBACLyB,KAAK,OACLxB,MAAOyB,KAAKrB,MAAMY,cAClBU,YAAY,cACZC,SAAUF,KAAK9B,gBAGjB,6BACE,2BACAI,KAAK,gBACLyB,KAAK,OACLxB,MAAOyB,KAAKrB,MAAMa,cAClBS,YAAY,aACZC,SAAUF,KAAK9B,gBAGjB,6BACE,2BACAI,KAAK,oBACLyB,KAAK,OACLxB,MAAOyB,KAAKrB,MAAMc,kBAClBQ,YAAY,UACZC,SAAUF,KAAK9B,gBAGjB,6BACE,2BACAI,KAAK,oBACLyB,KAAK,OACLxB,MAAOyB,KAAKrB,MAAMe,kBAClBO,YAAY,oBACZC,SAAUF,KAAK9B,gBAGjB,6BACE,4BAAQiC,QAASH,KAAKpB,iBAAtB,oBACA,4BAAQuB,QAASH,KAAKf,iBAAtB,oBACA,4BAAQkB,QAASH,KAAK/B,eAAtB,2B,GA7FImC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b12fbd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      emailSenderFilter: '',\r\n      emailUsername: '',\r\n      emailPassword: '',\r\n      wordpressUsername: '',\r\n      wordpressPassword: '',\r\n    }\r\n  }\r\n\r\n  loadEmailData = () => {\r\n\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    var change = {};\r\n    change[e.target.name] = e.target.value;\r\n    this.setState(change, () => console.log(this.state));\r\n  }\r\n\r\n  saveCredentials = () => {\r\n    var state = JSON.stringify(this.state);\r\n    localStorage.setItem('credentials', state);\r\n  }\r\n\r\n  loadCredentials = () => {\r\n    var stringCreds = localStorage.getItem('credentials');\r\n    if(stringCreds) {\r\n      var state = JSON.parse(stringCreds);\r\n      this.setState(state);\r\n    } else {\r\n      alert('No credentials found');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </header>\r\n        <section>\r\n          <div className=\"Form\">\r\n            <div>\r\n              <input\r\n                name=\"emailSenderFilter\"\r\n                type=\"text\" value={this.state.emailSenderFilter}\r\n                placeholder=\"ivan@petrov.com\"\r\n                onChange={this.handleChange} \r\n              />\r\n            </div>\r\n            <div>\r\n              <input\r\n              name=\"emailUsername\" \r\n              type=\"text\" \r\n              value={this.state.emailUsername} \r\n              placeholder=\"ivan@abv.bg\" \r\n              onChange={this.handleChange}\r\n            />\r\n            </div>\r\n            <div>\r\n              <input\r\n              name=\"emailPassword\" \r\n              type=\"text\" \r\n              value={this.state.emailPassword} \r\n              placeholder=\"securePa$$\" \r\n              onChange={this.handleChange}\r\n            />\r\n            </div>\r\n            <div>\r\n              <input\r\n              name=\"wordpressUsername\" \r\n              type=\"text\" \r\n              value={this.state.wordpressUsername} \r\n              placeholder=\"vankata\" \r\n              onChange={this.handleChange}\r\n            />\r\n            </div>\r\n            <div>\r\n              <input\r\n              name=\"wordpressPassword\" \r\n              type=\"text\" \r\n              value={this.state.wordpressPassword} \r\n              placeholder=\"4notherSecurePa$$\" \r\n              onChange={this.handleChange}\r\n            />\r\n            </div>\r\n            <div>\r\n              <button onClick={this.saveCredentials}>Save Credentials</button>\r\n              <button onClick={this.loadCredentials}>Load Credentials</button>\r\n              <button onClick={this.loadEmailData}>Load Email Data</button>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}