{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","loadEmailData","handleChange","e","change","target","name","value","setState","console","log","state","saveCredentials","JSON","stringify","localStorage","setItem","loadCredentials","stringCreds","getItem","parse","alert","emailSenderFilter","emailUsername","emailPassword","wordpressUsername","wordpressPassword","className","src","logo","alt","type","this","placeholder","onChange","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAOC,QAAU,IAA0B,kC,8MC0G5BC,G,kBArGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRC,cAAgB,aAZG,EAgBnBC,aAAe,SAACC,GACd,IAAIC,EAAS,GACbA,EAAOD,EAAEE,OAAOC,MAAQH,EAAEE,OAAOE,MACjC,EAAKC,SAASJ,GAAQ,kBAAMK,QAAQC,IAAI,EAAKC,WAnB5B,EAsBnBC,gBAAkB,WAChB,IAAID,EAAQE,KAAKC,UAAU,EAAKH,OAChCI,aAAaC,QAAQ,cAAeL,IAxBnB,EA2BnBM,gBAAkB,WAChB,IAAIC,EAAcH,aAAaI,QAAQ,eACvC,GAAGD,EAAa,CACd,IAAIP,EAAQE,KAAKO,MAAMF,GACvB,EAAKV,SAASG,QAEdU,MAAM,yBA9BR,EAAKV,MAAQ,CACXW,kBAAmB,GACnBC,cAAe,GACfC,cAAe,GACfC,kBAAmB,GACnBC,kBAAmB,IARJ,E,sEAsCjB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAE3C,iCACE,yBAAKH,UAAU,QACb,6BACE,2BACErB,KAAK,oBACLyB,KAAK,OAAOxB,MAAOyB,KAAKrB,MAAMW,kBAC9BW,YAAY,kBACZC,SAAUF,KAAK9B,gBAGnB,6BACE,2BACAI,KAAK,gBACLyB,KAAK,OACLxB,MAAOyB,KAAKrB,MAAMY,cAClBU,YAAY,cACZC,SAAUF,KAAK9B,gBAGjB,6BACE,2BACAI,KAAK,gBACLyB,KAAK,OACLxB,MAAOyB,KAAKrB,MAAMa,cAClBS,YAAY,aACZC,SAAUF,KAAK9B,gBAGjB,6BACE,2BACAI,KAAK,oBACLyB,KAAK,OACLxB,MAAOyB,KAAKrB,MAAMc,kBAClBQ,YAAY,UACZC,SAAUF,KAAK9B,gBAGjB,6BACE,2BACAI,KAAK,oBACLyB,KAAK,OACLxB,MAAOyB,KAAKrB,MAAMe,kBAClBO,YAAY,oBACZC,SAAUF,KAAK9B,gBAGjB,6BACE,4BAAQiC,QAASH,KAAKpB,iBAAtB,oBACA,4BAAQuB,QAASH,KAAKf,iBAAtB,oBACA,4BAAQkB,QAASH,KAAK/B,eAAtB,2B,GA7FImC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.197d5b3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      emailSenderFilter: '',\n      emailUsername: '',\n      emailPassword: '',\n      wordpressUsername: '',\n      wordpressPassword: '',\n    }\n  }\n\n  loadEmailData = () => {\n\n  }\n\n  handleChange = (e) => {\n    var change = {};\n    change[e.target.name] = e.target.value;\n    this.setState(change, () => console.log(this.state));\n  }\n\n  saveCredentials = () => {\n    var state = JSON.stringify(this.state);\n    localStorage.setItem('credentials', state);\n  }\n\n  loadCredentials = () => {\n    var stringCreds = localStorage.getItem('credentials');\n    if(stringCreds) {\n      var state = JSON.parse(stringCreds);\n      this.setState(state);\n    } else {\n      alert('No credentials found');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <section>\n          <div className=\"Form\">\n            <div>\n              <input\n                name=\"emailSenderFilter\"\n                type=\"text\" value={this.state.emailSenderFilter}\n                placeholder=\"ivan@petrov.com\"\n                onChange={this.handleChange} \n              />\n            </div>\n            <div>\n              <input\n              name=\"emailUsername\" \n              type=\"text\" \n              value={this.state.emailUsername} \n              placeholder=\"ivan@abv.bg\" \n              onChange={this.handleChange}\n            />\n            </div>\n            <div>\n              <input\n              name=\"emailPassword\" \n              type=\"text\" \n              value={this.state.emailPassword} \n              placeholder=\"securePa$$\" \n              onChange={this.handleChange}\n            />\n            </div>\n            <div>\n              <input\n              name=\"wordpressUsername\" \n              type=\"text\" \n              value={this.state.wordpressUsername} \n              placeholder=\"vankata\" \n              onChange={this.handleChange}\n            />\n            </div>\n            <div>\n              <input\n              name=\"wordpressPassword\" \n              type=\"text\" \n              value={this.state.wordpressPassword} \n              placeholder=\"4notherSecurePa$$\" \n              onChange={this.handleChange}\n            />\n            </div>\n            <div>\n              <button onClick={this.saveCredentials}>Save Credentials</button>\n              <button onClick={this.loadCredentials}>Load Credentials</button>\n              <button onClick={this.loadEmailData}>Load Email Data</button>\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}